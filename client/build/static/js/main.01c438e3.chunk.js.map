{"version":3,"sources":["logo.svg","components/PetTable.jsx","components/PetForm.jsx","views/Main.jsx","views/Details.jsx","views/Update.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","to","console","log","pets","sort","a","b","petType","map","pet","idx","key","petName","_id","useState","setPetName","setPetType","petDesc","setPetDesc","skillOne","setSkillOne","skillTwo","setSkillTwo","skillThree","setSkillThree","likes","error","setError","onSubmit","e","preventDefault","axios","post","then","res","data","navigate","catch","err","errs","response","errors","Object","keys","alert","message","push","type","onChange","target","value","setPets","loaded","setLoaded","useEffect","get","PetTable","removeFromDom","petId","filter","setPet","id","setLikes","used","setUsed","onClick","delete","deletePet","disabled","put","App","className","Main","path","PetForm","Details","Update","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,2JCK5B,WAACC,GAEZ,OACI,6BACI,2CACA,oEACA,kBAAC,IAAD,CAAMC,GAAI,YAAV,iBACA,+BACI,+BACI,4BACI,wCACA,wCACA,yCAGR,+BAEKC,QAAQC,IAAIH,EAAMI,MAElBF,QAAQC,IAAIH,EAAMI,KAAKC,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEE,QAAUD,EAAEC,QAAW,EAAMD,EAAEC,QAAUF,EAAEE,SAAY,EAAI,MAEnGR,EAAMI,KAAKK,KAAI,SAACC,EAAKC,GAAN,OACV,wBAAIC,IAAKD,GACH,4BAAKD,EAAIG,SACT,4BAAKH,EAAIF,SACT,4BAAI,kBAAC,IAAD,CAAMP,GAAE,eAAUS,EAAII,MAAtB,QAAJ,MAA+C,kBAAC,IAAD,CAAMb,GAAE,eAAUS,EAAII,IAAd,UAAR,iBCzBhE,WAACd,GAAW,IAAD,EACQe,mBAAS,IADjB,mBACfF,EADe,KACNG,EADM,OAEQD,mBAAS,IAFjB,mBAEfP,EAFe,KAENS,EAFM,OAGQF,mBAAS,IAHjB,mBAGfG,EAHe,KAGNC,EAHM,OAIUJ,mBAAS,IAJnB,mBAIfK,EAJe,KAILC,EAJK,OAKUN,mBAAS,IALnB,mBAKfO,EALe,KAKLC,EALK,OAMcR,mBAAS,IANvB,mBAMfS,EANe,KAMHC,EANG,OAQIV,mBAAS,GARb,mBAQfW,EARe,aAUIX,mBAAS,KAVb,mBAUfY,EAVe,KAURC,EAVQ,KAqCtB,OACI,6BACI,2CACA,+DACA,kBAAC,IAAD,CAAM3B,GAAI,KAAV,WACA,0BAAM4B,SA7BU,SAAAC,GACpBA,EAAEC,iBACFC,IAAMC,KAAK,gCAAiC,CACxCpB,UAASL,UAASU,UAASE,WAAUE,WAAUE,aAAYE,UAE9DQ,MAAK,SAAAC,GACFjC,QAAQC,IAAIgC,EAAIC,MAEhBC,YAAS,QAIZC,OAAM,SAAAC,GACH,IAAMC,EAAO,GACbtC,QAAQC,IAAIoC,EAAIE,UAChBvC,QAAQC,IAAIoC,EAAIE,SAASL,KAAKM,QAC9BC,OAAOC,KAAKL,EAAIE,SAASL,KAAKM,QAAQjC,KAAI,SAAAG,GACtCiC,MAAMN,EAAIE,SAASL,KAAKM,OAAO9B,GAAKkC,SACpCN,EAAKO,KAAKR,EAAIE,SAASL,KAAKM,OAAO9B,GAAKkC,YAE5ClB,EAASY,QAUT,2BAAIb,EAAM,IACN,2BACI,2CAAuB,6BACvB,2BAAOqB,KAAK,OAAOC,SAAY,SAACnB,GAAD,OAAOd,EAAWc,EAAEoB,OAAOC,WAE9D,2BAAIxB,EAAM,IACV,2BACI,2CAAuB,6BACvB,2BAAOqB,KAAK,OAAOC,SAAY,SAACnB,GAAD,OAAOb,EAAWa,EAAEoB,OAAOC,WAE9D,2BAAIxB,EAAM,IACV,2BACI,kDAA8B,6BAC9B,2BAAOqB,KAAK,OAAOC,SAAY,SAACnB,GAAD,OAAOX,EAAWW,EAAEoB,OAAOC,WAE9D,2BACI,4CAAwB,6BACxB,2BAAOH,KAAK,OAAOC,SAAY,SAACnB,GAAD,OAAOT,EAAYS,EAAEoB,OAAOC,WAE/D,2BACI,4CAAwB,6BACxB,2BAAOH,KAAK,OAAOC,SAAY,SAACnB,GAAD,OAAOP,EAAYO,EAAEoB,OAAOC,WAE/D,2BACI,4CAAwB,6BACxB,2BAAOH,KAAK,OAAOC,SAAY,SAACnB,GAAD,OAAOL,EAAcK,EAAEoB,OAAOC,WAEjE,2BAAOH,KAAK,cCpEb,aAAO,IAAD,EAEOjC,mBAAS,IAFhB,mBAEVX,EAFU,KAEJgD,EAFI,OAGWrC,oBAAS,GAHpB,mBAGVsC,EAHU,KAGFC,EAHE,KAKjBC,qBAAU,WACNvB,IAAMwB,IAAI,iCACTtB,MAAK,SAAAC,GACFjC,QAAQC,IAAIgC,GACZiB,EAAQjB,EAAIC,MACZkB,GAAU,QAEf,IAWH,OACI,6BAGKD,GAAU,kBAACI,EAAD,CAAUrD,KAAMA,EAAMsD,cAbnB,SAAAC,GAClBP,EAAQhD,EAAKwD,QAAO,SAAAlD,GAAG,OAAIA,EAAII,MAAQ6C,WCjBhC,WAAA3D,GAAU,IAAD,EAEEe,mBAAU,IAFZ,mBAEbL,EAFa,KAERmD,EAFQ,KAKpBN,qBAAU,WACNvB,IAAMwB,IAAN,wCAA2CxD,EAAM8D,KAChD5B,MAAK,SAAAC,GACF0B,EAAO1B,EAAIC,MACX2B,EAAS,GACT7D,QAAQC,IAAIgC,EAAIC,WAErB,IAZiB,MAeMrB,mBAAS,GAff,mBAebW,EAfa,KAeNqC,EAfM,OAgBIhD,oBAAS,GAhBb,mBAgBbiD,EAhBa,KAgBPC,EAhBO,KAkCpB,OACI,6BACI,2CACA,qDAA2BvD,EAAIG,SAC/B,qCAAWa,GACX,wCAAchB,EAAIF,SAClB,2CAAiBE,EAAIQ,SACrB,kBAAC,IAAD,CAAMjB,GAAE,KAAR,WAA6B,6BAC7B,4BAAQiE,QAAS,SAACpC,IAjBR,SAAC9B,GACfgC,IAAMmC,OAAN,wCAA8CnE,IACzCkC,MAAK,SAAAC,GACFjC,QAAQC,IAAIgC,GAEZE,YAAS,QAYY+B,CAAU1D,EAAII,OAAvC,mBACA,6BACA,4BAAQoD,QAAS,SAACpC,GAxBtBiC,EAASrC,EAAQ,GACjBuC,GAAQ,IAuBoCI,SAAUL,GAAlD,UC1CG,WAAAhE,GAAU,IACd8D,EAAM9D,EAAN8D,GADa,EAEU/C,mBAAS,IAFnB,mBAEbF,EAFa,KAEJG,EAFI,OAGUD,mBAAS,IAHnB,mBAGbP,EAHa,KAGJS,EAHI,OAIUF,mBAAS,IAJnB,mBAIbG,EAJa,KAIJC,EAJI,OAKYJ,mBAAS,IALrB,mBAKbK,EALa,KAKHC,EALG,OAMYN,mBAAS,IANrB,mBAMbO,EANa,KAMHC,EANG,OAOgBR,mBAAS,IAPzB,mBAObS,EAPa,KAODC,EAPC,OAQMV,mBAAS,IARf,mBAQbY,EARa,KAQNC,EARM,KAUpB2B,qBAAU,WACNvB,IAAMwB,IAAN,wCAA2CM,IACtC5B,MAAK,SAAAC,GACFnB,EAAWmB,EAAIC,KAAKvB,SACpBI,EAAWkB,EAAIC,KAAK5B,SACpBW,EAAWgB,EAAIC,KAAKlB,SACpBG,EAAYc,EAAIC,KAAKhB,UACrBG,EAAYY,EAAIC,KAAKd,UACrBG,EAAcU,EAAIC,KAAKZ,iBAEhC,IAsBH,OACI,6BACI,2CACA,+CACA,kBAAC,IAAD,CAAMvB,GAAI,KAAV,WACA,0BAAM4B,SAzBI,SAAAC,GACdA,EAAEC,iBACFC,IAAMsC,IAAN,wCAA2CR,GAAM,CAC7CjD,UAASL,UAASU,UAASE,WAAUE,WAAUE,eAE9CU,MAAK,SAAAC,GACFjC,QAAQC,IAAIgC,GACZE,YAAS,QAEZC,OAAM,SAAAC,GACH,IAAMC,EAAO,GACbtC,QAAQC,IAAIoC,EAAIE,SAASL,KAAKM,QAC9BC,OAAOC,KAAKL,EAAIE,SAASL,KAAKM,QAAQjC,KAAI,SAAAG,GACtCiC,MAAMN,EAAIE,SAASL,KAAKM,OAAO9B,GAAKkC,SACpCN,EAAKO,KAAKR,EAAIE,SAASL,KAAKM,OAAO9B,GAAKkC,YAE5ClB,EAASY,QAUb,2BAAIb,EAAM,IACN,2BACI,2CAAuB,6BACvB,2BAAOqB,KAAK,OACRG,MAAOtC,EACPoC,SAAY,SAACnB,GAAD,OAAOd,EAAWc,EAAEoB,OAAOC,WAE/C,2BAAIxB,EAAM,IACV,2BACI,2CAAuB,6BACvB,2BAAOqB,KAAK,OACRG,MAAO3C,EACPyC,SAAY,SAACnB,GAAD,OAAOb,EAAWa,EAAEoB,OAAOC,WAE/C,2BAAIxB,EAAM,IACV,2BACI,kDAA8B,6BAC9B,2BAAOqB,KAAK,OACRG,MAAOjC,EACP+B,SAAY,SAACnB,GAAD,OAAOX,EAAWW,EAAEoB,OAAOC,WAE/C,2BACI,4CAAwB,6BACxB,2BAAOH,KAAK,OACRG,MAAO/B,EACP6B,SAAY,SAACnB,GAAD,OAAOT,EAAYS,EAAEoB,OAAOC,WAEhD,2BACI,4CAAwB,6BACxB,2BAAOH,KAAK,OACRG,MAAO7B,EACP2B,SAAY,SAACnB,GAAD,OAAOP,EAAYO,EAAEoB,OAAOC,WAEhD,2BACI,4CAAwB,6BACxB,2BAAOH,KAAK,OACRG,MAAO3B,EACPyB,SAAY,SAACnB,GAAD,OAAOL,EAAcK,EAAEoB,OAAOC,WAElD,2BAAOH,KAAK,cCtEbuB,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAACC,EAAD,CAAMC,KAAK,MACX,kBAACC,EAAD,CAASD,KAAK,aACd,kBAACE,EAAD,CAASF,KAAK,aACd,kBAACG,EAAD,CAAQH,KAAK,qBCLDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdtD,OAAM,SAAAX,GACLzB,QAAQyB,MAAMA,EAAMmB,c","file":"static/js/main.01c438e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\n\r\nexport default (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <h3>Adopt one of these pets already guy.</h3>\r\n            <Link to={'/pet/new'} >Add a new pet</Link>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Pet Name</th>\r\n                        <th>Pet Type</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                    {console.log(props.pets)}\r\n                   \r\n                    {console.log(props.pets.sort((a,b) => (a.petType > b.petType) ? 1 : ((b.petType > a.petType) ? -1 : 0)))}\r\n                       \r\n                    {props.pets.map((pet, idx) => \r\n                          <tr key={idx}>\r\n                                <td>{pet.petName}</td>\r\n                                <td>{pet.petType}</td>\r\n                                <td><Link to={`/pet/${pet._id}`}>View</Link> | <Link to={`/pet/${pet._id}/edit`}>Edit</Link></td>\r\n                            </tr>\r\n                        )}\r\n                </tbody>\r\n\r\n            </table>\r\n        </div>\r\n    )\r\n}","import React, {useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { navigate, Link } from '@reach/router';\r\n\r\nexport default (props) => {\r\n    const [petName, setPetName] = useState(\"\");\r\n    const [petType, setPetType] = useState(\"\");\r\n    const [petDesc, setPetDesc] = useState(\"\");\r\n    const [skillOne, setSkillOne] = useState(\"\");\r\n    const [skillTwo, setSkillTwo] = useState(\"\");\r\n    const [skillThree, setSkillThree] = useState(\"\");\r\n\r\n    const [likes, setLikes] = useState(0);\r\n\r\n    const [error, setError] = useState([])\r\n\r\n\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        axios.post('http://localhost:8000/api/pet', {\r\n            petName, petType, petDesc, skillOne, skillTwo, skillThree, likes\r\n        })\r\n        .then(res => {\r\n            console.log(res.data)\r\n            // props.addPet(res.data) // this adds pets without reloading\r\n            navigate(\"/\")\r\n            \r\n        })\r\n        // .catch(err => console.log(\"woopsie doodles\"))\r\n        .catch(err => {\r\n            const errs = [];\r\n            console.log(err.response)\r\n            console.log(err.response.data.errors);\r\n            Object.keys(err.response.data.errors).map(key => {\r\n                alert(err.response.data.errors[key].message)\r\n                errs.push(err.response.data.errors[key].message)\r\n            })\r\n            setError(errs)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <h3>Add this pet already there yous</h3>\r\n            <Link to={\"/\"}>Go Back</Link>\r\n            <form onSubmit={onSubmitHandler}>\r\n            <p>{error[0]}</p>\r\n                <p>\r\n                    <label>Pet Name</label><br/>\r\n                    <input type=\"text\" onChange = {(e) => setPetName(e.target.value)} />\r\n                </p>\r\n                <p>{error[1]}</p>\r\n                <p>\r\n                    <label>Pet Type</label><br/>\r\n                    <input type=\"text\" onChange = {(e) => setPetType(e.target.value)} />\r\n                </p>\r\n                <p>{error[2]}</p>\r\n                <p>\r\n                    <label>Pet Description</label><br/>\r\n                    <input type=\"text\" onChange = {(e) => setPetDesc(e.target.value)} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Skill</label><br/>\r\n                    <input type=\"text\" onChange = {(e) => setSkillOne(e.target.value)} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Skill</label><br/>\r\n                    <input type=\"text\" onChange = {(e) => setSkillTwo(e.target.value)} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Skill</label><br/>\r\n                    <input type=\"text\" onChange = {(e) => setSkillThree(e.target.value)} />\r\n                </p>\r\n                <input type=\"submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport PetTable from '../components/PetTable';\r\nimport PetForm from '../components/PetForm';\r\n\r\n\r\nexport default () => {\r\n\r\n    const [pets, setPets] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/pet')\r\n        .then(res => {\r\n            console.log(res); //Always console.log your res first\r\n            setPets(res.data);\r\n            setLoaded(true);\r\n        });\r\n    }, []);\r\n\r\n    const removeFromDom = petId => {\r\n        setPets(pets.filter(pet => pet._id !== petId));\r\n    }\r\n\r\n    // ADD PET TO END OF LIST WITHOUT RELOADING PAGE\r\n    const addPet = (pet) => {\r\n        setPets([...pets, pet]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <PetForm addPet={addPet} />\r\n            <hr/> */}\r\n            {loaded && <PetTable pets={pets} removeFromDom={removeFromDom}/>}\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios'; \r\nimport { Link, navigate } from '@reach/router';\r\n\r\nexport default props => {\r\n\r\n    const [pet, setPet] = useState ({})\r\n\r\n    \r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n        .then(res => {\r\n            setPet(res.data);\r\n            setLikes(0)\r\n            console.log(res.data)\r\n        })\r\n    }, [])\r\n\r\n\r\n    const [likes, setLikes] = useState(0);\r\n    const [used, setUsed] = useState(false);\r\n\r\n    const likeCount = e => {\r\n        \r\n        setLikes(likes + 1);\r\n        setUsed(true)\r\n    }\r\n\r\n    // const { removeFromDom } = props;\r\n    const deletePet = (props) => {\r\n        axios.delete(`http://localhost:8000/api/pet/${props}`)\r\n            .then(res => {\r\n                console.log(res)\r\n                // removeFromDom(petId)\r\n                navigate('/')\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <h3>Learn a little about: {pet.petName}</h3>\r\n            <p>Likes: {likes}</p>\r\n            <p>Pet Type: {pet.petType}</p>\r\n            <p>Description: {pet.petDesc}</p>\r\n            <Link to={`/`}>Go Back</Link><br/>\r\n            <button onClick={(e) => {deletePet(pet._id) }}>Adopt this pet </button>\r\n            <br/>\r\n            <button onClick={(e) => {likeCount() }} disabled={used}>Like</button>\r\n        </div>\r\n    )\r\n}","\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Link, navigate } from '@reach/router';\r\n\r\n\r\nexport default props => {\r\n    const {id} = props;\r\n    const [petName, setPetName] = useState(\"\");\r\n    const [petType, setPetType] = useState(\"\");\r\n    const [petDesc, setPetDesc] = useState(\"\");\r\n    const [skillOne, setSkillOne] = useState(\"\");\r\n    const [skillTwo, setSkillTwo] = useState(\"\");\r\n    const [skillThree, setSkillThree] = useState(\"\");\r\n    const [error, setError] = useState([])\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pet/${id}`)\r\n            .then(res => {\r\n                setPetName(res.data.petName);\r\n                setPetType(res.data.petType);\r\n                setPetDesc(res.data.petDesc);\r\n                setSkillOne(res.data.skillOne);\r\n                setSkillTwo(res.data.skillTwo);\r\n                setSkillThree(res.data.skillThree);\r\n            })\r\n    }, [])\r\n\r\n    const updatePet = e => {\r\n        e.preventDefault();\r\n        axios.put(`http://localhost:8000/api/pet/${id}`, {\r\n            petName, petType, petDesc, skillOne, skillTwo, skillThree\r\n        })\r\n            .then(res => {\r\n                console.log(res);\r\n                navigate('/');\r\n            })\r\n            .catch(err => {\r\n                const errs = [];\r\n                console.log(err.response.data.errors);\r\n                Object.keys(err.response.data.errors).map(key => {\r\n                    alert(err.response.data.errors[key].message)\r\n                    errs.push(err.response.data.errors[key].message)\r\n                })\r\n                setError(errs)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <h3>Update This Pet</h3>\r\n            <Link to={\"/\"}>Go Back</Link>\r\n            <form onSubmit={updatePet}>\r\n            <p>{error[0]}</p>\r\n                <p>\r\n                    <label>Pet Name</label><br/>\r\n                    <input type=\"text\" \r\n                        value={petName}\r\n                        onChange = {(e) => setPetName(e.target.value)} />\r\n                </p>\r\n                <p>{error[1]}</p>\r\n                <p>\r\n                    <label>Pet Type</label><br/>\r\n                    <input type=\"text\" \r\n                        value={petType}\r\n                        onChange = {(e) => setPetType(e.target.value)} />\r\n                </p>\r\n                <p>{error[2]}</p>\r\n                <p>\r\n                    <label>Pet Description</label><br/>\r\n                    <input type=\"text\" \r\n                        value={petDesc}\r\n                        onChange = {(e) => setPetDesc(e.target.value)} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Skill</label><br/>\r\n                    <input type=\"text\" \r\n                        value={skillOne}\r\n                        onChange = {(e) => setSkillOne(e.target.value)} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Skill</label><br/>\r\n                    <input type=\"text\" \r\n                        value={skillTwo}\r\n                        onChange = {(e) => setSkillTwo(e.target.value)} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Skill</label><br/>\r\n                    <input type=\"text\" \r\n                        value={skillThree}\r\n                        onChange = {(e) => setSkillThree(e.target.value)} />\r\n                </p>\r\n                <input type=\"submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Router } from '@reach/router'\n\nimport Main from './views/Main';\nimport Details from './views/Details';\nimport Update from './views/Update'\nimport PetForm from './components/PetForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path=\"/\" />\n        <PetForm path=\"/pet/new\" />\n        <Details path=\"/pet/:id\" />\n        <Update path=\"/pet/:id/edit\" />\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}